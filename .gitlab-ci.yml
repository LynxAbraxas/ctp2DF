image: docker:stable

services:
  - docker:dind

before_script:
  - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY

stages:
  - build
  - test
  - release

variables:
  IMAGE_TAG: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG

build:
  stage: build
  tags:
    - multicore
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  script:
    - docker pull $IMAGE_TAG:system-latest || true
    - docker pull $IMAGE_TAG:builder-latest || true
    - docker pull $IMAGE_TAG:test || true
    ## 1st stage build using system-latest for caching
    - docker build --pull
                   --cache-from $IMAGE_TAG:system-latest
                   --tag $IMAGE_TAG:system-latest
                   --target system
                   .
    ## 2nd stage build using builder-latest for caching
    - docker build --pull
                   --cache-from $IMAGE_TAG:system-latest
                   --cache-from $IMAGE_TAG:builder-latest
                   --tag $IMAGE_TAG:builder-latest
                   --target builder 
                   .
    ## 3rd stage build using system-latest and builder-latest for caching
    - docker build --pull
                   --cache-from $IMAGE_TAG:system-latest
                   --cache-from $IMAGE_TAG:builder-latest
                   --cache-from $IMAGE_TAG:test
                   --tag $IMAGE_TAG:test
                   .
    - docker push $IMAGE_TAG:system-latest
    - docker push $IMAGE_TAG:builder-latest
    - docker push $IMAGE_TAG:test
  retry: 2

.test: &test
  stage: test
  image: registry.gitlab.com/lynxabraxas/dind-sikuli/master:latest
  variables:
    RES_FILE: ${CI_JOB_NAME}.png
    DOCKER_PARAMS: ""
  artifacts:
    untracked: true
    when: always
  script:
    - export SHARED_PATH="$(dirname ${CI_PROJECT_DIR})/shared"
    - mkdir -p ${SHARED_PATH}/.X11-unix/
    - mkdir -p /tmp/.X11-unix/
    - mount --bind ${SHARED_PATH}/.X11-unix/ /tmp/.X11-unix/
    - export DISPLAY=:99.0
    - Xvfb $DISPLAY -screen 0 1280x1024x24 &
    - pidX=$!
    - sleep 3
    - docker pull $IMAGE_TAG:test
    - echo $DOCKER_PARAMS
    - echo $CTP_PARAMS
    - docker run
             --env DISPLAY
             -v ${SHARED_PATH}/.X11-unix/:/tmp/.X11-unix/
             -v $(pwd)/.civctp2/save/:/opt/ctp2/ctp2_program/ctp/save/
             $DOCKER_PARAMS
             $IMAGE_TAG:test
             ./ctp2 $CTP_PARAMS &
    - pidD=$!
    - java -cp "/opt/sikulixapi.jar:/opt/jython-standalone-2.7.1.jar" org.python.util.jython tests/${CI_JOB_NAME}.sikuli/${CI_JOB_NAME}.py
    - kill $pidD
    - kill $pidX
    - test -f $RES_FILE
  retry: 2

start-game:
  <<: *test
  variables:
    CTP_PARAMS: "nointromovie"

new-game:
  <<: *test
  variables:
    CTP_PARAMS: "nointromovie"

load-game:
  <<: *test
  variables:
    CTP_PARAMS: "nointromovie"

name-game:
  <<: *test
  variables:
    CTP_PARAMS: "nointromovie"

play-game_build-city:
  <<: *test
  variables:
    CTP_PARAMS: "nointromovie"

load-sprite:
  <<: *test
  variables:
    CTP_PARAMS: "nointromovie runspriteeditor"

loop-sprite:
  <<: *test
  variables:
    CTP_PARAMS: "nointromovie runspriteeditor"

save-sprite:
  stage: test
  image: registry.gitlab.com/lynxabraxas/dind-sikuli/master:latest
  variables:
    RES_FILE: ${CI_JOB_NAME}.spr
    DOCKER_PARAMS: ""
    CTP_PARAMS: "nointromovie runspriteeditor"
  artifacts:
    untracked: true
    when: always
  script:
    - export SHARED_PATH="$(dirname ${CI_PROJECT_DIR})/shared"
    - mkdir -p ${SHARED_PATH}/.X11-unix/
    - mkdir -p /tmp/.X11-unix/
    - mount --bind ${SHARED_PATH}/.X11-unix/ /tmp/.X11-unix/
    - export DISPLAY=:99.0
    - Xvfb $DISPLAY -screen 0 1280x1024x24 &
    - pidX=$!
    - sleep 3
    - docker pull $IMAGE_TAG:test
    - echo $DOCKER_PARAMS
    - echo $CTP_PARAMS
    - touch $RES_FILE # file must exist for docker bind of file
    - chmod a+rw $RES_FILE # user inside docker must have write permission!
    - docker run
             --env DISPLAY
             -v ${SHARED_PATH}/.X11-unix/:/tmp/.X11-unix/
             -v $(pwd)/.civctp2/save/:/opt/ctp2/ctp2_program/ctp/save/
             -v $(pwd)/${RES_FILE}:/opt/ctp2/ctp2_data/default/graphics/sprites/${RES_FILE}
             $DOCKER_PARAMS
             $IMAGE_TAG:test
             ./ctp2 $CTP_PARAMS &
    - pidD=$!
    - java -cp "/opt/sikulixapi.jar:/opt/jython-standalone-2.7.1.jar" org.python.util.jython tests/${CI_JOB_NAME}.sikuli/${CI_JOB_NAME}.py
    - kill $pidD
    - kill $pidX
    - test -f $RES_FILE
    - echo "b9d9702ad28410d68ec1269838e3dabb  $RES_FILE" | md5sum -c
  retry: 2

export-sprite:
  stage: test
  image: registry.gitlab.com/lynxabraxas/dind-sikuli/master:latest
  variables:
    RES_FILE: ${CI_JOB_NAME}.txt
    DOCKER_PARAMS: ""
    CTP_PARAMS: "nointromovie runspriteeditor"
  artifacts:
    untracked: true
    when: always
  script:
    - export SHARED_PATH="$(dirname ${CI_PROJECT_DIR})/shared"
    - mkdir -p ${SHARED_PATH}/.X11-unix/
    - mkdir -p /tmp/.X11-unix/
    - mount --bind ${SHARED_PATH}/.X11-unix/ /tmp/.X11-unix/
    - export DISPLAY=:99.0
    - Xvfb $DISPLAY -screen 0 1280x1024x24 &
    - pidX=$!
    - sleep 3
    - docker pull $IMAGE_TAG:test
    - echo $DOCKER_PARAMS
    - echo $CTP_PARAMS
    - touch $RES_FILE # file must exist for docker bind of file
    - chmod a+rw $RES_FILE # user inside docker must have write permission!
    - docker run
             --env DISPLAY
             -v ${SHARED_PATH}/.X11-unix/:/tmp/.X11-unix/
             -v $(pwd)/.civctp2/save/:/opt/ctp2/ctp2_program/ctp/save/
             -v $(pwd)/${RES_FILE}:/opt/ctp2/ctp2_program/ctp/${RES_FILE}
             $DOCKER_PARAMS
             $IMAGE_TAG:test
             ./ctp2 $CTP_PARAMS &
    - pidD=$!
    - java -cp "/opt/sikulixapi.jar:/opt/jython-standalone-2.7.1.jar" org.python.util.jython tests/${CI_JOB_NAME}.sikuli/${CI_JOB_NAME}.py
    - kill $pidD
    - kill $pidX
    - egrep "${RES_FILE}|GOOD_SPRITE|GOOD_SPRITE_IDLE|ANIM_NUM_FRAMES|ANIM_TRANSPARENCIESANIM_TRANSPARENCIES" $RES_FILE
  retry: 2

create-sprite:
  stage: test
  image: registry.gitlab.com/lynxabraxas/dind-sikuli/master:latest
  variables:
    RES_FILE: GG100
    DOCKER_PARAMS: ""
    CTP_PARAMS: "nointromovie runspriteeditor"
  artifacts:
    untracked: true
    when: always
  script:
    - apk update && apk upgrade && apk add --no-cache git imagemagick
    - curl -SL -o blender.tar.bz2 https://download.blender.org/release/Blender2.79/blender-2.79b-linux-glibc219-x86_64.tar.bz2
    - mkdir -p /opt/blender
    - tar -xf blender.tar.bz2 -C /opt/blender --strip-components=1
    - git clone https://gitlab.com/LynxAbraxas/sprites.git
    - /opt/blender/blender -b sprite-models/mushroom.blend -o //${RES_FILE}/${RES_FILE}A.## -a
    - for i in `seq -f %02.0f 1 25 ` ; do
      mogrify -transparent black -type TrueColorMatte sprite-models/${RES_FILE}A.$i.tif ;
      convert sprite-models/${RES_FILE}A.$i.tif -alpha set -fill '#FFFFFFFF' -draw 'color 0,0 reset' -type TrueColorMatte GG111S.$i.tif ;
      done
    - export SHARED_PATH="$(dirname ${CI_PROJECT_DIR})/shared"
    - mkdir -p ${SHARED_PATH}/.X11-unix/
    - mkdir -p /tmp/.X11-unix/
    - mount --bind ${SHARED_PATH}/.X11-unix/ /tmp/.X11-unix/
    - export DISPLAY=:99.0
    - Xvfb $DISPLAY -screen 0 1280x1024x24 &
    - pidX=$!
    - sleep 3
    - docker pull $IMAGE_TAG:test
    - echo $DOCKER_PARAMS
    - echo $CTP_PARAMS
    - touch $RES_FILE # file must exist for docker bind of file
    - chmod a+rw $RES_FILE # user inside docker must have write permission!
    - docker run
             --env DISPLAY
             -v ${SHARED_PATH}/.X11-unix/:/tmp/.X11-unix/
             -v $(pwd)/.civctp2/save/:/opt/ctp2/ctp2_program/ctp/save/
             -v $(pwd)/sprite-models/${RES_FILE}/:/opt/ctp2/ctp2_program/ctp/${RES_FILE}/
             -v $(pwd)/${RES_FILE}:/opt/ctp2/ctp2_data/default/graphics/sprites/${RES_FILE}
             $DOCKER_PARAMS
             $IMAGE_TAG:test
             ./ctp2 $CTP_PARAMS &
    - pidD=$!
    - java -cp "/opt/sikulixapi.jar:/opt/jython-standalone-2.7.1.jar" org.python.util.jython tests/${CI_JOB_NAME}.sikuli/${CI_JOB_NAME}.py
    - kill $pidD
    - kill $pidX
    - test -f $RES_FILE
    - echo "b9d9702ad28410d68ec1269838e3dabb  $RES_FILE" | md5sum -c
  retry: 2

release:
  variables:
    GIT_STRATEGY: none
  stage: release
  script:
    - docker pull $IMAGE_TAG:test
    - docker tag  $IMAGE_TAG:test $IMAGE_TAG:latest
    - docker push $IMAGE_TAG:latest
  only:
    - master
